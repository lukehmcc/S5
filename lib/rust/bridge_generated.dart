// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

class RustImpl implements Rust {
  final RustPlatform _platform;
  factory RustImpl(ExternalLibrary dylib) => RustImpl.raw(RustPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustImpl.wasm(FutureOr<WasmModule> module) => RustImpl(module as ExternalLibrary);
  RustImpl.raw(this._platform);
  Future<Uint8List> encryptXchacha20Poly1305(
      {required Uint8List key, required Uint8List nonce, required Uint8List plaintext, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(key);
    var arg1 = _platform.api2wire_uint_8_list(nonce);
    var arg2 = _platform.api2wire_uint_8_list(plaintext);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_encrypt_xchacha20poly1305(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kEncryptXchacha20Poly1305ConstMeta,
      argValues: [key, nonce, plaintext],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEncryptXchacha20Poly1305ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "encrypt_xchacha20poly1305",
        argNames: ["key", "nonce", "plaintext"],
      );

  Future<Uint8List> decryptXchacha20Poly1305(
      {required Uint8List key, required Uint8List nonce, required Uint8List ciphertext, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(key);
    var arg1 = _platform.api2wire_uint_8_list(nonce);
    var arg2 = _platform.api2wire_uint_8_list(ciphertext);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_decrypt_xchacha20poly1305(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kDecryptXchacha20Poly1305ConstMeta,
      argValues: [key, nonce, ciphertext],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDecryptXchacha20Poly1305ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "decrypt_xchacha20poly1305",
        argNames: ["key", "nonce", "ciphertext"],
      );

  Future<Uint8List> hashBlake3File({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_hash_blake3_file(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kHashBlake3FileConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHashBlake3FileConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "hash_blake3_file",
        argNames: ["path"],
      );

  Future<Uint8List> hashBlake3({required Uint8List input, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_hash_blake3(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kHashBlake3ConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHashBlake3ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "hash_blake3",
        argNames: ["input"],
      );

  Uint8List hashBlake3Sync({required Uint8List input, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(input);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_hash_blake3_sync(arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kHashBlake3SyncConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHashBlake3SyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "hash_blake3_sync",
        argNames: ["input"],
      );

  Future<int> verifyIntegrity(
      {required Uint8List chunkBytes,
      required int offset,
      required Uint8List baoOutboardBytes,
      required Uint8List blake3Hash,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(chunkBytes);
    var arg1 = _platform.api2wire_u64(offset);
    var arg2 = _platform.api2wire_uint_8_list(baoOutboardBytes);
    var arg3 = _platform.api2wire_uint_8_list(blake3Hash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_verify_integrity(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_u8,
      constMeta: kVerifyIntegrityConstMeta,
      argValues: [chunkBytes, offset, baoOutboardBytes, blake3Hash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVerifyIntegrityConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "verify_integrity",
        argNames: ["chunkBytes", "offset", "baoOutboardBytes", "blake3Hash"],
      );

  Future<BaoResult> hashBaoFile({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_hash_bao_file(port_, arg0),
      parseSuccessData: _wire2api_bao_result,
      constMeta: kHashBaoFileConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHashBaoFileConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "hash_bao_file",
        argNames: ["path"],
      );

  Future<BaoResult> hashBaoMemory({required Uint8List bytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(bytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_hash_bao_memory(port_, arg0),
      parseSuccessData: _wire2api_bao_result,
      constMeta: kHashBaoMemoryConstMeta,
      argValues: [bytes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHashBaoMemoryConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "hash_bao_memory",
        argNames: ["bytes"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  BaoResult _wire2api_bao_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BaoResult(
      hash: _wire2api_uint_8_list(arr[0]),
      outboard: _wire2api_uint_8_list(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
